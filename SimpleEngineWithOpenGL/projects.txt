Summary

001-004: Wall Pong
005-011: Scrolling background and component-based shooter
012-015: A* tower defense
016-020: OpenGL Renderer for shooter
021-   : 3D basics

Chapters

001: Window, Log and Game class
002: Renderer
003: Wall pong render
004: Wall pong game

005: Actors and components
006: Texture load and resource manager + example
007: Sprite component, renderer drawSprite + example
008: Animated sprite and parrallax sprite component + example
009: Move component and astroids (+ Random and Actor, Vector2 improvements)
010: Input component and controllable Ship (update Game, Component and Actor)
011: Circle collisions (CircleCollisionComponent, Laser - update Game)

012: Grid and Tiles (Game update)
013: A* path finding (update Tile, Grid)
014: Enemy generation: NavComponent and enemy (update Game, Grid)
015: Tower placement and shoot Bullet (update Game and Grid)

016: Start with copy of project 011, abstract renderer, the game should be still working
017: OpenGL display. Update Window. RendererOGL, VertexArray.
018: Shader + shader files + Basic shader draw. ResourceManager shader load.
019: Display quads. Matrix4 and Vector3 + Transform in Actor (update Game, Component, Shader, Texture).
020: Display sprites' textures. Update Texture.

21: Update copy of project 020. Quaternions (Matrix4, Vector3 and Actor update). Delete RenderSDL. Sprites on OGL renderer.
22: Load mesh dans display it with its shader. Update renderer. Include rapidjson.



NOTES

Refactor chargement : ajouter une fonction unload dans tous les assets et l'appeler depuis le resource manager
Comprendre pourquoi le destructeur des textures est appel√©
load error pour les assets